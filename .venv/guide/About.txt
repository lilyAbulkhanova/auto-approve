Это Telegram-бот, который помогает администратору канала автоматически принимать (или отклонять) платные “предложенные посты”.

Из чего состоит (главные части)
settings.py — настройки и тексты: токен бота, списки владельцев/белого списка, минимальная цена, сообщения.
main.py — точка входа: создаёт бота и диспетчер, подключает роутеры и запускает опрос Telegram.
routers/
owner_router.py — команды только для владельцев: /start, /help, /id.
user_router.py — ловит “предложенные посты” в личке канала и запускает бизнес-логику.
services/process_paid_posts.py — бизнес-логика “решения”: проверить источник, автора, цену → вернуть approve/decline/модерация.
utils/
owner_validator.py — фильтр “это сообщение от владельца?”
topic_id.py — достаёт id “треда” в личке канала, чтобы отвечать туда же.
Dockerfile — сборка и запуск проекта в контейнере.

Как бот “видит” сообщения и понимает, что делать:
1)Telegram шлёт обновления (updates) боту: это события типа message, callback_query и т.п.
Мы запускаем dp.start_polling(bot, allowed_updates=["message"]) → бот читает только сообщения.
2)Локация сообщений: мы используем личку канала (Direct Messages, внутренний чат между автором и каналом).
У такого сообщения chat.is_direct_messages == True.
В коде (в user_router.py) есть фильтр: @user_router.message(F.chat.is_direct_messages == True, F.suggested_post_info)
обработчик срабатывает только на сообщения:
из лички канала;
которые содержат suggested_post_info (то есть это реально “предложенный пост”, а не просто текст).
3)Что такое suggested_post_info
Это специальное поле в объекте Message, которое Telegram добавляет, когда пользователь прислал предложение поста каналу.
Там может быть цена (price.amount, price.currency, например XTR), и другие метаданные.
4)Бизнес-логика решения (process_paid_posts):
Если сообщение не из лички канала → игнор (невалидно).
Если автор не в whitelist → модерация (бот не одобряет; отвечает текстом “ожидайте модерацию”).
Если валюта XTR и цена ниже, чем MIN_POST_PRICE → decline (бот прямо отклоняет пост с комментарием).
Иначе → approve (бот одобряет пост и отправляет подтверждение).
{
  "ans": True/False,      # нужно ли approve
  "msg": "текст ответа",
  "valid": True/False,    # валидное ли сообщение для обработки
  "decline": True/False   # нужно ли явно отклонить пост
}
5)Как бот совершает действие
Обработчик (on_suggested_post) смотрит на словарь:
decline == True → вызывает bot.decline_suggested_post(...) и прикладывает комментарий.
valid == False → ничего не делает.
ans == True → вызывает bot.approve_suggested_post(...), затем отправляет поясняющее сообщение автору.
иначе → просто отправляет поясняющее сообщение (без approve/decline).
6)Куда бот отвечает
В личке канала есть “тред” (topic). Мы достаём его id функцией topic(message) и передаём в ответах:
await message.answer(text, direct_messages_topic_id=topic(message))
Это гарантирует, что ответы бота видны прямо “в контексте” исходного предложения.

Роли и доступы
OWNER_IDS (владельцы) — могут вызывать служебные команды /start, /help, /id.
Проверка делается фильтром OwnerValidator.
USER_ID_WHITELIST — пользователи, чьи предложенные посты бот может одобрять автоматически.

